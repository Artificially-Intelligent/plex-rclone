#!/usr/bin/with-contenv bash

if [[ $PLEXDRIVE == "TRUE" || $PLEXDRIVE == "true" || $PLEXDRIVE == "1" || $PLEXDRIVE == "True" ]] ; then 
    echo "PLEXDRIVE == TRUE - plexdrive service will be created"
    cp -r /etc/services.d.inactive/plexdrive_decrypted /etc/services.d
    cp -r /etc/services.d.inactive/plexdrive /etc/services.d
else
    rm -rf /etc/services.d/plexdrive_decrypted
    rm -rf /etc/services.d/plexdrive
fi

if ! [ -z "${RCLONE_CONFIG_PASS}" ] || ! [ -z "${OP}" ] ; then
    if [ -z "${RCLONE_CONFIG_PASS}" ] ; then
		RCLONE_CONFIG_BAK=$RCLONE_CONFIG
		RCLONE_CONFIG=/tmp/rclone.conf
		export RCLONE_CONFIG_PASS=$(rclone reveal $OP)
		RCLONE_CONFIG=$RCLONE_CONFIG_BAK
    fi
    RCLONE_CONFIG_EXPORT=$(rclone config show --config /root/.config/rclone/rclone.conf --ask-password=false )
    export RCLONE_CONFIG_PASS=
fi

if [ -f /root/.config/rclone/rclone.conf ] ; then 
    if [ -z "${RCLONE_CONFIG}" ]; then
        RCLONE_CONFIG_DIR="/config/rclone"
    else
        RCLONE_CONFIG_DIR=${RCLONE_CONFIG%/*}
    fi
    
   # # remove team_drive.id and token.json files if they are empty
   # [ -s ${RCLONE_CONFIG_DIR}/team_drive.id ] || rm ${RCLONE_CONFIG_DIR}/team_drive.id
   # [ -s ${RCLONE_CONFIG_DIR}/token.json ]    || rm ${RCLONE_CONFIG_DIR}/token.json
    
    # load values generated by reconnect-rclone-config.sh if they exist
    if [ -z $RCLONE_DRIVE_TOKEN ] && [ -f "${RCLONE_CONFIG_DIR}/token.json" ] &&  ! [ -s ${RCLONE_CONFIG_DIR}/token.json ]; then
		echo "loaded rclone token from ${RCLONE_CONFIG_DIR}/token.json"
        export RCLONE_DRIVE_TOKEN=$(cat ${RCLONE_CONFIG_DIR}/token.json)
    fi
    if [ -z $RCLONE_DRIVE_TEAM_DRIVE ] && [ -f "${RCLONE_CONFIG_DIR}/team_drive.id" ] && ! [ -s ${RCLONE_CONFIG_DIR}/team_drive.json ]; then
	echo "loaded rclone team_drive id from ${RCLONE_CONFIG_DIR}/token.json"
        export RCLONE_DRIVE_TEAM_DRIVE=$(cat ${RCLONE_CONFIG_DIR}/team_drive.id)
    fi
fi

if [ -z "${RCLONE_DRIVE_TEAM_DRIVE}" ]; then
    RCLONE_DRIVE_TEAM_DRIVE=$(echo $RCLONE_CONFIG_EXPORT | grep team_drive | sed -e 's#.*team_drive = \(\)#\1#' | cut -d' ' -f 1)
fi

if [ -z "${PLEXDRIVE_CONFIG_PATH}" ]; then
    PLEXDRIVE_CONFIG_PATH=/config/plexdrive/
    echo "note: PLEXDRIVE_CONFIG_PATH env variable not defined. Assigning default path: $PLEXDRIVE_CONFIG_PATH"
fi

mkdir -p "$PLEXDRIVE_CONFIG_PATH";

if ! [ -z "${RCLONE_DRIVE_TEAM_DRIVE}" ]; then
    echo $RCLONE_DRIVE_TEAM_DRIVE > ${PLEXDRIVE_CONFIG_PATH}/team_drive.id
else
    [ -f ${PLEXDRIVE_CONFIG_PATH}/drive.id ] || ${PLEXDRIVE_CONFIG_PATH}/team_drive.id
fi

if ! [ -z "$PLEXDRIVE_CONFIG_URL_TOKEN" ] && ! [ -z "$PLEXDRIVE_CONFIG_URL_CONFIG" ] ; then
    echo "PLEXDRIVE_CONFIG_URL_TOKEN and PLEXDRIVE_CONFIG_URL_CONFIG defined. Attempting to download latest config files"
    curl -L -o ./token.json $PLEXDRIVE_CONFIG_URL_TOKEN 
    curl -L -o ./config.json $PLEXDRIVE_CONFIG_URL_CONFIG 
    # /usr/bin/gdown.pl $PLEXDRIVE_CONFIG_URL_TOKEN ./token.json
    # /usr/bin/gdown.pl $PLEXDRIVE_CONFIG_URL_CONFIG ./config.json
    
    if [ -f "./token.json" ] &&  [ -f "./config.json" ]; then
        echo "note: token.json & config.json downloaded sucessfully. Overwriting folder contents with dowloaded config files."
        mv -f ./token.json ${PLEXDRIVE_CONFIG_PATH}token.json
        mv -f ./config.json ${PLEXDRIVE_CONFIG_PATH}config.json
    fi
    if ! [ -z "$PLEXDRIVE_CONFIG_URL_CACHE" ] && ! [ -f ${PLEXDRIVE_CONFIG_PATH}cache.bolt ] ; then
        echo "PLEXDRIVE_CONFIG_URL_CACHE defined. Attempting to download latest cache file"
        # curl -L -o ./cache.bolt $PLEXDRIVE_CONFIG_URL_CACHE
        /usr/bin/gdown.pl $PLEXDRIVE_CONFIG_URL_CACHE ./cache.bolt
        
        if [ -f "./cache.bolt" ]; then
            echo "note: cache.bolt download found. Overwriting existing plexdrive cache.bolt file."
            mv ./cache.bolt ${PLEXDRIVE_CONFIG_PATH}cache.bolt
        fi
    fi
fi

if [ -z "${PLEXDRIVE_TOKEN_JSON}" ] && ! [ -z "${RCLONE_DRIVE_TOKEN}" ] ; then
    PLEXDRIVE_TOKEN_JSON=$RCLONE_DRIVE_TOKEN
fi
if ! [ -z "${PLEXDRIVE_TOKEN_JSON}" ]; then
    echo $PLEXDRIVE_TOKEN_JSON > ${PLEXDRIVE_CONFIG_PATH}token.json
    echo "note: PLEXDRIVE_TOKEN_JSON env variable defined. Replacing ${PLEXDRIVE_CONFIG_PATH}token.json with variable contents"
else
    if ! [ -z "${RCLONE_CONFIG_REMOTE_TOKEN}" ]; then
        echo $RCLONE_CONFIG_REMOTE_TOKEN > ${PLEXDRIVE_CONFIG_PATH}token.json
        echo "note: RCLONE_CONFIG_REMOTE_TOKEN env variable defined. Replacing ${PLEXDRIVE_CONFIG_PATH}token.json with variable contents"
    else
        if ! [ -z "${RCLONE_CONFIG_EXPORT}" ]; then
            echo $RCLONE_CONFIG_EXPORT | grep token | sed -e 's#.*token = \(\)#\1#' | cut -d' ' -f 1 > ${PLEXDRIVE_CONFIG_PATH}token.json
        fi
    fi
fi

if ! [ -z "${PLEXDRIVE_CONFIG_JSON}" ]; then
    echo $PLEXDRIVE_CONFIG_JSON > ${PLEXDRIVE_CONFIG_PATH}config.json
    echo "note: PLEXDRIVE_CONFIG_JSON env variable defined. Replacing ${PLEXDRIVE_CONFIG_PATH}config.json with variable contents"
else
    if ! [ -z "${RCLONE_CONFIG_EXPORT}" ] && ( [ -z "${RCLONE_DRIVE_CLIENT_ID}" ] || [ -z "${RCLONE_DRIVE_CLIENT_SECRET}" ] ) ; then
        RCLONE_DRIVE_CLIENT_ID=$(echo $RCLONE_CONFIG_EXPORT | grep client_id | sed -e 's#.*client_id = \(\)#\1#' | cut -d' ' -f 1)
        RCLONE_DRIVE_CLIENT_SECRET=$(echo $RCLONE_CONFIG_EXPORT | grep secret | sed -e 's#.*secret = \(\)#\1#' | cut -d' ' -f 1)
        QUIET=TRUE
    fi
    if ! [ -z "${RCLONE_DRIVE_CLIENT_ID}" ] && ! [ -z "${RCLONE_DRIVE_CLIENT_SECRET}" ] ; then
        echo "{\"ClientID\":\"$RCLONE_DRIVE_CLIENT_ID\",\"ClientSecret\":\"$RCLONE_DRIVE_CLIENT_SECRET\"}" > ${PLEXDRIVE_CONFIG_PATH}config.json
        ! [ -z $QUIET ] || echo "note: RCLONE_DRIVE_CLIENT_ID and RCLONE_DRIVE_CLIENT_SECRET env variable defined. Replacing ${PLEXDRIVE_CONFIG_PATH}config.json with variable contents"
    fi
    if ! [ -z "${RCLONE_CONFIG_REMOTE_CLIENT_ID}" ] && ! [ -z "${RCLONE_CONFIG_REMOTE_CLIENT_SECRET}" ] ; then
        echo "{\"ClientID\":\"$RCLONE_CONFIG_REMOTE_CLIENT_ID\",\"ClientSecret\":\"$RCLONE_CONFIG_REMOTE_CLIENT_SECRET\"}"> ${PLEXDRIVE_CONFIG_PATH}config.json
        ! [ -z $QUIET ] || echo "note: RCLONE_CONFIG_REMOTE_CLIENT_ID and RCLONE_CONFIG_REMOTE_CLIENT_SECRET env variable defined. Replacing ${PLEXDRIVE_CONFIG_PATH}config.json with variable contents"
    fi
fi

if ! [[ $PLEXDRIVE_CONFIG_PATH == "/root/.plexdrive/" ]]; then 
    #Link to default plexdrive config path
    ln -s $PLEXDRIVE_CONFIG_PATH -T /root/.plexdrive
fi

# remove config.json and token.json files if they are empty
[ -s ${PLEXDRIVE_CONFIG_PATH}/config.json ] || mv ${PLEXDRIVE_CONFIG_PATH}/config.json ${PLEXDRIVE_CONFIG_PATH}/config.json.bak
[ -s ${PLEXDRIVE_CONFIG_PATH}/token.json  ] || mv ${PLEXDRIVE_CONFIG_PATH}/token.json ${PLEXDRIVE_CONFIG_PATH}/token.json.bak

if [ ! -f "${PLEXDRIVE_CONFIG_PATH}config.json" ]; then
    echo "warning: PLEXDRIVE config file ${PLEXDRIVE_CONFIG_PATH}config.json doesn't exist. Please create one and place in folder mounted to /config/plexdrive"
fi
if [ ! -f "${PLEXDRIVE_CONFIG_PATH}token.json" ]; then
    echo "warning: PLEXDRIVE config file ${PLEXDRIVE_CONFIG_PATH}token.json doesn't exist. Please create one and place in folder mounted to /config/plexdrive"
fi
